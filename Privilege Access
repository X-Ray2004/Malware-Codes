#include <windows.h>
#include <aclapi.h>

int main() {
    // Specify the file path
    LPCTSTR filePath = L"C:\\Program Files (x86)\\Windows NT\\TableTextService";

    // Get the current security descriptor for the file
    SECURITY_DESCRIPTOR sd;
    InitializeSecurityDescriptor(&sd, SECURITY_DESCRIPTOR_REVISION);

    // Get the DACL
    PACL dacl;
    if (!GetSecurityDescriptorDacl(&sd, TRUE, &dacl, NULL)) {
        // Handle error
        printf("Error getting DACL: %d\n", GetLastError());
        return 1;
    }

    // Create a new DACL if necessary
    if (dacl == NULL) {
        if (!AllocateAndInitializeSid(&EveryoneSid, 1, SECURITY_WORLD_SID, 0, 0, 0, 0, 0, 0, 0, &dacl)) {
            // Handle error
            printf("Error allocating SID: %d\n", GetLastError());
            return 1;
        }
    }

    // Add a DENY ACE for read, write, and execute permissions
    EXPLICIT_ACCESS ea = { 0 };
    ea.grfAccessMode = DENY_ACCESS;
    ea.grfAccessFlags = GENERIC_READ | GENERIC_WRITE | GENERIC_EXECUTE;
    ea.Trustee.pMultipleTrustee = NULL;
    ea.Trustee.TrusteeForm = TRUSTEE_IS_SID;
    ea.Trustee.TrusteeType = TRUSTEE_IS_USER;
    ea.Trustee.ptstrName = (LPTSTR)EveryoneSid;

    if (!SetEntriesInAcl(1, &ea, dacl, &dacl)) {
        // Handle error
        printf("Error setting entries in ACL: %d\n", GetLastError());
        return 1;
    }

    // Update the security descriptor with the modified DACL
    if (!SetSecurityDescriptorDacl(&sd, TRUE, TRUE, dacl)) {
        // Handle error
        printf("Error setting DACL in security descriptor: %d\n", GetLastError());
        return 1;
    }

    // Apply the updated security descriptor to the file
    if (!SetFileSecurity(filePath, FILE_ALL_ACCESS, &sd)) {
        // Handle error
        printf("Error setting file security: %d\n", GetLastError());
        return 1;
    }

    printf("Permissions for %s have been set to deny all access.\n", filePath);

    return 0;
}
